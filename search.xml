<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[springboot config]]></title>
    <url>%2F2018%2F04%2F16%2Fspringboot-config%2F</url>
    <content type="text"><![CDATA[说明spingboot 可以添加自定义的配置，需要在application.yml文件中添加，并设置对应的Config类解析。当然也可以指定配置文件，及相关的解析前缀。 demoapplication.yml server: servlet: context-path: /patient port: 8080spring: thymeleaf: encoding: UTF-8 mode: HTML Config.java]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot web]]></title>
    <url>%2F2018%2F04%2F16%2Fspringboot-web%2F</url>
    <content type="text"><![CDATA[依赖123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; config参考[https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties]WEB PROPERTIES 部分 thymeleaf参考[https://www.thymeleaf.org/documentation.html] ModelAndViewjson @RestController 相关注解 @Controller @RestController @GetMapping @PostMapping @PutMapping @DeleteMapping]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式锁]]></title>
    <url>%2F2018%2F04%2F10%2Fjava%2F</url>
    <content type="text"><![CDATA[分布式锁的几种实现方式：在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。什么是分布式锁分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。分布式锁需要解决的问题互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。分布式锁的实现方式数据库实现缓存实现，比如rediszookeeper实现未完待续]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL优化]]></title>
    <url>%2F2018%2F04%2F07%2Fmysql%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[查询类型 indexconstsystem]]></content>
      <categories>
        <category>storage</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo]]></title>
    <url>%2F2018%2F04%2F06%2Fhexo%2F</url>
    <content type="text"><![CDATA[安装依赖 nodeyarnyarn global add hexo start mkdir blog &amp;&amp; cd blogyarn init github pagesadd repo 仓库名必须是github用户名，比如username.github.io config repo settings -&gt; GitHub Pages -&gt; 选择master分支 -&gt; save deploy 安装插件 yarn add hexo-deployer-git 修改配置文件 deploy: type: git repo: git@github.com:username/username.github.io.git branch: master 配置主题 下载后，修改根配置下的主题名称；主题配置中修改相关项。 写作 添加page添加文章（分类、标签） 配置后的动作 hexo clean hexo generate hexo deploy 访问https://yourgithubname.github.io]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>

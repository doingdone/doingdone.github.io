<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[webpack]]></title>
    <url>%2F2018%2F04%2F22%2Fwebpack%2F</url>
    <content type="text"><![CDATA[前提 nodejs npm or yarn 初始化 mkdir project &amp;&amp; cd project yarn init -y yarn add webpack webpack-cli 添加webpack配置文件 修改package.json 文件，添加脚本]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[crypto]]></title>
    <url>%2F2018%2F04%2F21%2Fcrypto%2F</url>
    <content type="text"><![CDATA[加密 什么是加密 什么是编码 摘要 摘要是干什么的，跟加密有什么区别]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于编码]]></title>
    <url>%2F2018%2F04%2F21%2FJava%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[基本概念 hex也称为base16，意思是使用16个可见字符来表示一个二进制数组，编码后数据大小将翻倍,因为1个字符需要用2个可见字符来表示。 base32，意思是使用32个可见字符来表示一个二进制数组，编码后数据大小变成原来的8/5,也即5个字符用8个可见字符表示，但是最后如果不足8个字符，将用=来补充。 base64，意思是使用64个可见字符来表示一个二进制数组，编码后数据大小变成原来的4/3,也即3个字符用4个可见字符来表示。 使用场景1有很多字符是不可见的，我们需要把这些不可见字符变成可见字符。那为啥要变成可见字符？你是看着乱码舒服还是看着可见字符舒服呢？其实不仅仅舒不舒服的问题，有些时候还必须要用可见字符，例如在网络中传输数据时，不同路由器对于不可见字符的处理是不同的，因此可能出现数据错误，因此还必须使用可见字符。 Unicode 只是一个符号集，将世界上所有的符号都纳入其中。 只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。 乱码乱码是因为编码、解码方式不一致，因此要知道字符的编码方式，然后按照同样的方式去解码。 编码转换方法 new String(&quot;hello&quot;.getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;); DemoHEX 依赖Guava /** * Hex编码, 将byte[]编码为String，默认为ABCDEF为大写字母. */ public static String encodeHex(byte[] input) { return BaseEncoding.base16().encode(input); } /** * Hex解码, 将String解码为byte[]. * * 字符串有异常时抛出IllegalArgumentException. */ public static byte[] decodeHex(CharSequence input) { return BaseEncoding.base16().decode(input); } Base32Base64 依赖Guava /** * Base64编码. */ public static String encodeBase64(byte[] input) { return BaseEncoding.base64().encode(input); } /** * Base64解码. * * 如果字符不合法，抛出IllegalArgumentException */ public static byte[] decodeBase64(CharSequence input) { return BaseEncoding.base64().decode(input); } 区别与联系区别主要就是空间效率的区别，base64是具有比较高的空间效率的。当然，hex编码不区分大小写，但是base32与base64是区分的。联系就是大家都是一种稳定的把二进制数组变成可见字符的编码方式。base32中StdEncoding和HexEncoding所使用的字符不同，但是具体其他区别我也不是很清楚。base64中URLEncoding一般用于编码URL]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[exception处理]]></title>
    <url>%2F2018%2F04%2F19%2Fexception%2F</url>
    <content type="text"><![CDATA[运行时 vs notspring统一异常处理异常日志记录异常堆栈信息]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>aop</tag>
        <tag>util</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[logback]]></title>
    <url>%2F2018%2F04%2F19%2Flogback%2F</url>
    <content type="text"></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>util</tag>
        <tag>springboot</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring-mock]]></title>
    <url>%2F2018%2F04%2F19%2Fspring-mock%2F</url>
    <content type="text"></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot-mybatis]]></title>
    <url>%2F2018%2F04%2F18%2Fspringboot-mybatis%2F</url>
    <content type="text"><![CDATA[简介springboot集成mybaits时，有mybatis官方提供的mybatis-spring-boot-starter，但mapper不可通用，开发工作量大，因此使用mapper-spring-boot-starter的通用mapper。 通用Mapper都可以极大的方便开发人员。可以随意的按照自己的需要选择通用方法，还可以很方便的开发自己的通用方法。极其方便的使用MyBatis单表的增删改查。支持单表操作，不支持通用的多表联合查询。 githubwiki pom123456789101112131415161718&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;druid-starter.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;!--mapper--&gt;&lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mapper-starter.version&#125;&lt;/version&gt;&lt;/dependency&gt; 配置 数据源配置 参考druid-spring-boot-starter配置即可 mybatis配置 config-location与configuration只可配置一项 123456config-location: classpath:mybatis-config.xmlconfiguration: map-underscore-to-camel-case: true log-impl: org.apache.ibatis.logging.stdout.StdOutImpltype-aliases-package:mapper-locations: mapper配置 详见wiki mappers配置项注意 如果只使用通用mapper，可以不配置mappers，如果使用了MysqlMapper等其他mapper，而且自己定义了BaseMapper，要设置mappers。（一般BaseMapper继承Mapper和其他mapper，比如MysqlMapper） 123mapper: mappers: - com.daijk.demo.dao.base.BaseMapper 开撸关于@MapperScan包名必填，并且mappers配置的类不能在包下 对象关系映射 主键 @Id 列 @Column @ColumnType]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>mybatis</tag>
        <tag>持久化</tag>
        <tag>数据源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot web]]></title>
    <url>%2F2018%2F04%2F16%2Fspringboot-web%2F</url>
    <content type="text"><![CDATA[依赖123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; config参考[https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties]WEB PROPERTIES 部分 thymeleaf参考[https://www.thymeleaf.org/documentation.html] ModelAndViewjson @RestController 相关注解 @Controller @RestController @GetMapping @PostMapping @PutMapping @DeleteMapping]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot config]]></title>
    <url>%2F2018%2F04%2F16%2Fspringboot-config%2F</url>
    <content type="text"><![CDATA[说明spingboot 可以添加自定义的配置，需要在application.yml文件中添加，并设置对应的Config类解析。当然也可以指定配置文件，及相关的解析前缀。 demoapplication.yml server: servlet: context-path: /patient port: 8080spring: thymeleaf: encoding: UTF-8 mode: HTML Config.java]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>util</tag>
        <tag>springboot</tag>
        <tag>yml</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式锁]]></title>
    <url>%2F2018%2F04%2F10%2F%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%2F</url>
    <content type="text"><![CDATA[分布式锁的几种实现方式：在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。什么是分布式锁分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。分布式锁需要解决的问题互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。分布式锁的实现方式数据库实现缓存实现，比如rediszookeeper实现未完待续]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo]]></title>
    <url>%2F2018%2F04%2F06%2Fhexo%2F</url>
    <content type="text"><![CDATA[安装依赖 nodeyarnyarn global add hexo start mkdir blog &amp;&amp; cd blogyarn init github pagesadd repo 仓库名必须是github用户名，比如username.github.io config repo settings -&gt; GitHub Pages -&gt; 选择master分支 -&gt; save deploy 安装插件 yarn add hexo-deployer-git 修改配置文件 deploy: type: git repo: git@github.com:username/username.github.io.git branch: master 配置主题 下载后，修改根配置下的主题名称；主题配置中修改相关项。 写作 添加page添加文章（分类、标签） 配置后的动作 hexo clean hexo generate hexo deploy 访问https://yourgithubname.github.io]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
